class Snake {
    // 1: up, 2: right, 3: down, 4: left
    field int headX, headY;
    field int direction;
    field int length, maxLength;
    field boolean alive;
    field Array body;

    constructor Snake new() {
        let headX = 16;
        let headY = 32;
        let direction = 2;
        let length = 1;
        let maxLength = 50;
        let alive = true;
        let body = Array.new(maxLength);
        let body[0] = Segment.new(headX, headY);
        return this;
    }

    method void dispose() {
        var int i;
        var Segment segment;
        let i = 0;
        while(i < length) {
            let segment = body[i];
            do segment.dispose();
            let i = i - 1;
        }

        do Memory.deAlloc(this);
        return;
    }

    method void shift() {
        var int i, len;
        var Segment after, before, head;

        let i = length - 1;

        while(i > 0) {
            let before = body[i - 1];
            let after = body[i];
            do after.setX(before[0]);
            do after.setY(before[1]);
            let i = i - 1;
        }

        let head = body[0];
        do head.setX(headX);
        do head.setY(headY);

        return;
    }

    method void grow() {
        let body[length] = Segment.new(0, 0);
        let length = length + 1;
        return;
    }

    method void setDirection(int dir) {
        if (dir = 1) { if (direction = 3) { return; } }
        if (dir = 3) { if (direction = 1) { return; } }
        if (dir = 2) { if (direction = 4) { return; } }
        if (dir = 4) { if (direction = 2) { return; } }
        let direction = dir;
        return;
    }

    method boolean isAlive() {
        return alive;
    }

    method void checkCollision() {
        var int i;
        var Segment segment;
        let i = 1;
        while(i < length) {
            let segment = body[i];
            if (headX = segment[0]) {
                if (headY = segment[1]) {
                    let alive = false;
                    return;
                }
            }
            let i = i + 1;
        }
        return;
    }

    method void tick() {
        if (direction = 1) { let headY = headY - 8; }
        if (direction = 2) { let headX = headX + 8; }
        if (direction = 3) { let headY = headY + 8; }
        if (direction = 4) { let headX = headX - 8; }
        // Check boundries
        if (headY < 0)   { let alive = false; return; }
        if (headY > 256) { let alive = false; return; }
        if (headX < 0)   { let alive = false; return; }
        if (headX > 512) { let alive = false; return; }

        do grow();
        do shift();
        do checkCollision();
        return;
    }


    method void render() {
        var int i, x, y;
        var Segment segment;
        let i = 0;

        do Screen.setColor(true);
        while(i < length) {
            let segment = body[i];
            let x = segment[0];
            let y = segment[1];
            do Screen.drawRectangle(x, y, x + 8, y + 8);
            let i = i + 1;
        }

        return;
    }
}
